name: Build Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v0.00, v0.01, v0.02)

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest, macos-latest, macos-13, ubuntu-22.04]
        include:
          - platform: windows-latest
            platform_name: windows
            artifact_name: hvym-windows
            executable_name: hvym.exe
            python_version: '3.11'
          - platform: macos-latest
            platform_name: macos
            artifact_name: hvym-macos-arm64
            executable_name: hvym
            python_version: '3.10'
          - platform: macos-13
            platform_name: macos
            artifact_name: hvym-macos-amd64
            executable_name: hvym
            python_version: '3.11'
          - platform: ubuntu-22.04
            platform_name: linux
            artifact_name: hvym-linux
            executable_name: hvym
            python_version: '3.11'

    runs-on: ${{ matrix.platform }}
    env:
      # Enable extra PyInstaller logging during CI builds
      HVYM_PYI_LOG_DEBUG: '1'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}
        check-latest: true
        
    - name: Check Python environment
      run: |
        echo "Python version: $(python --version)"
        echo "Python location: $(which python)"
        echo "Pip location: $(which pip)"
        echo "Python path: $PYTHONPATH"
        echo "Current working directory: $(pwd)"
        echo "[hvym-ci] sys.path (top 10):"
        python -c "import sys; print(sys.path[:10])"
        
    - name: Build Linux executable in Docker
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        
        # Create output directories
        mkdir -p hvym/dist/linux/
        
        # Build the Docker image
        echo "Building Docker image..."
        docker build -t hvym-builder -f Dockerfile.linux-build .
        
        # Create a temporary build script to avoid quoting issues
        cat > /tmp/build_script.sh << 'EOL'
        #!/bin/bash
        set -e
        
        echo "Starting build inside container..."
        cd /app
        
        # Set up environment
        export PYTHONPATH=/app
        
        # Debug: Show current directory structure
        echo "Current directory structure:"
        ls -la /app
        
        # Create output directory if it doesn't exist
        mkdir -p /app/hvym/dist/linux
        
        # Run the build
        echo "Running build command..."
        python build_cross_platform.py --platform linux
        
        # Debug: Show build output
        echo "Build output directories:"
        echo "Checking /hvym/dist/linux/..."
        ls -la /hvym/dist/linux/ 2>/dev/null || echo "/hvym/dist/linux/ not found"
        echo "\nChecking /app/hvym/dist/linux/..."
        ls -la /app/hvym/dist/linux/ 2>/dev/null || echo "/app/hvym/dist/linux/ not found"
        echo "\nChecking /app/dist/linux/..."
        ls -la /app/dist/linux/ 2>/dev/null || echo "/app/dist/linux/ not found"
        
        # Check for the binary in multiple possible locations
        BINARY_PATH="/hvym/dist/linux/hvym"
        if [ ! -f "$BINARY_PATH" ]; then
            BINARY_PATH="/app/hvym/dist/linux/hvym"
            if [ ! -f "$BINARY_PATH" ]; then
                BINARY_PATH="/app/dist/linux/hvym"
            fi
        fi
        
        # Verify the binary was created
        if [ -f "$BINARY_PATH" ]; then
            echo "Build successful! Binary found at $BINARY_PATH"
            chmod +x "$BINARY_PATH"
            
            # Show binary information
            echo "Binary information:"
            file "$BINARY_PATH"
            ldd "$BINARY_PATH" || true
            
            # Copy to a temporary location that will be accessible outside the container
            mkdir -p /tmp/output
            cp "$BINARY_PATH" /tmp/output/hvym-linux
            chmod +x /tmp/output/hvym-linux
            
            # Also copy to /app/hvym/dist/linux for verification
            mkdir -p /app/hvym/dist/linux
            cp "$BINARY_PATH" /app/hvym/dist/linux/hvym
            chmod +x /app/hvym/dist/linux/hvym
            exit 0
        else
            echo "Error: Build failed - binary not found!"
            echo "Searched in:"
            echo "  /hvym/dist/linux/hvym"
            echo "  /app/hvym/dist/linux/hvym"
            echo "  /app/dist/linux/hvym"
            echo "Current directory: $(pwd)"
            echo "Directory contents (top level):"
            ls -la /
            echo "\nSearching for binary in / :"
            find / -name "hvym" -type f 2>/dev/null || true
            exit 1
        fi
        EOL
        
        # Make the script executable
        chmod +x /tmp/build_script.sh
        
        # Run the build inside the container with proper volume mounts
        echo "Running build inside container..."
        docker run --rm \
          -v "$(pwd):/app" \
          -v "/tmp/build_script.sh:/tmp/build_script.sh" \
          -w /app \
          --entrypoint /bin/bash \
          hvym-builder \
          /tmp/build_script.sh
          
        # After build, check if the binary exists in the expected location
        if [ -f "/tmp/hvym-linux" ]; then
            echo "Found binary at /tmp/hvym-linux"
            mkdir -p hvym/dist/linux/
            mv /tmp/hvym-linux hvym/dist/linux/hvym
            chmod +x hvym/dist/linux/hvym
            echo "Binary moved to hvym/dist/linux/hvym"
        fi
        
        # Verify the binary was created in the expected location
        if [ -f "hvym/dist/linux/hvym" ]; then
            echo "Binary successfully built:"
            ls -lh hvym/dist/linux/hvym
            
            # Verify the binary is executable
            if [ -x "hvym/dist/linux/hvym" ]; then
                echo "Binary is executable"
                exit 0
            else
                echo "Error: Binary is not executable:"
                ls -la hvym/dist/linux/
                exit 1
            fi
        else
            echo "Error: Failed to find built binary in hvym/dist/linux/"
            echo "Current working directory: $(pwd)"
            echo "Directory contents:"
            find . -type f -name "hvym" -o -name "*.so" || true
            exit 1
        fi
        
    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        # Install Xcode Command Line Tools if not already installed
        xcode-select --install || true
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Installing build requirements..."
        pip install -r build_requirements.txt
        echo "Build requirements installation completed"
        echo "pip freeze (top 120):" && pip freeze | sed -n '1,120p'

    - name: Verify PyInstaller installation
      run: |
        python -c "import PyInstaller; print('PyInstaller version:', PyInstaller.__version__)"
        which pyinstaller || echo "PyInstaller not in PATH"
        pyinstaller --version
        
    - name: Test build script
      run: |
        python build_cross_platform.py --info
        
    - name: Build executable
      if: matrix.platform != 'ubuntu-22.04'  # Skip this for Linux as we use Docker
      run: |
        echo "Platform matrix: ${{ toJson(matrix) }}"
        python build_cross_platform.py --platform ${{ matrix.platform_name }}
        echo "Build script completed with exit code: $?"
        
    - name: Debug build output
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing current directory:"
        ls -la
        echo "Listing hvym directory:"
        ls -la hvym || true
        echo "Listing hvym/dist directory:"
        ls -la hvym/dist || true
        echo "Listing hvym/dist/linux directory:"
        ls -la hvym/dist/linux || true
      shell: bash
      if: matrix.platform == 'ubuntu-22.04'
        
    - name: Verify executable
      run: |
        echo "Verifying executable for platform: ${{ matrix.platform_name }}"
        echo "Looking for executable: ${{ matrix.executable_name }}"
        
        # Define possible locations for the binary
        BINARY_PATH=""
        
        # Check platform-specific locations
        if [[ "${{ matrix.platform_name }}" == "windows" ]]; then
          # Windows specific path
          BINARY_PATH="hvym/dist/windows/${{ matrix.executable_name }}"
        elif [[ "${{ matrix.platform_name }}" == "macos" ]]; then
          # macOS specific path (from PyInstaller)
          BINARY_PATH="dist/${{ matrix.artifact_name }}/${{ matrix.executable_name }}"
          if [ ! -f "$BINARY_PATH" ]; then
            # Fallback to hvym/dist/macos/hvym
            BINARY_PATH="hvym/dist/macos/${{ matrix.executable_name }}"
          fi
        else
          # Linux or other platforms
          BINARY_PATH="hvym/dist/${{ matrix.platform_name }}/${{ matrix.executable_name }}"
        fi
        
        echo "Checking for binary at: $BINARY_PATH"
        
        # Check if binary exists
        if [ ! -f "$BINARY_PATH" ]; then
          echo "Error: Binary not found at $BINARY_PATH"
          echo "Directory contents:"
          find . -name "${{ matrix.executable_name }}" -o -name "*.app" | sort
          exit 1
        fi
        
        # Check if binary is executable (skip for .exe on Windows)
        if [[ "${{ matrix.platform_name }}" != "windows" ]]; then
          if [ -x "$BINARY_PATH" ]; then
            echo "âœ“ Binary is executable"
          else
            echo "Error: Binary exists but is not executable: $BINARY_PATH"
            ls -l "$BINARY_PATH"
            exit 1
          fi
        else
          echo "âœ“ Binary found (Windows)"
        fi
        
        # For macOS, also check the .app bundle if it exists
        if [[ "${{ matrix.platform_name }}" == "macos" ]]; then
          APP_BUNDLE="dist/${{ matrix.artifact_name }}.app"
          if [ -d "$APP_BUNDLE" ]; then
            echo "Found macOS app bundle: $APP_BUNDLE"
            # Verify the binary inside the app bundle
            BUNDLE_BINARY="$APP_BUNDLE/Contents/MacOS/${{ matrix.executable_name }}"
            if [ -f "$BUNDLE_BINARY" ] && [ -x "$BUNDLE_BINARY" ]; then
              echo "âœ“ App bundle binary is executable"
            else
              echo "Warning: Could not verify executable in app bundle"
            fi
          fi
        fi
      shell: bash
      
    # Removed redundant directory creation - now handled in the copy step
      
    - name: Copy build artifacts to workspace
      run: |
        echo "Copying artifacts for platform: ${{ matrix.platform_name }}"
        
        # Create artifacts directory
        mkdir -p artifacts/${{ matrix.platform_name }}
        
        # Define source paths based on platform
        if [[ "${{ matrix.platform_name }}" == "windows" ]]; then
          SRC_DIR="hvym/dist/windows"
          SRC_BIN="$SRC_DIR/${{ matrix.executable_name }}"
        elif [[ "${{ matrix.platform_name }}" == "macos" ]]; then
          # Check for macOS app bundle first
          if [ -d "dist/${{ matrix.artifact_name }}.app" ]; then
            SRC_DIR="dist"
            SRC_BIN="$SRC_DIR/${{ matrix.artifact_name }}"
          else
            SRC_DIR="hvym/dist/macos"
            SRC_BIN="$SRC_DIR/${{ matrix.executable_name }}"
          fi
        else
          # Linux
          SRC_DIR="hvym/dist/linux"
          SRC_BIN="$SRC_DIR/${{ matrix.executable_name }}"
        fi
        
        echo "Source directory: $SRC_DIR"
        echo "Source binary: $SRC_BIN"
        
        # Copy the binary
        if [ -f "$SRC_BIN" ] || [ -d "$SRC_BIN" ]; then
          echo "Copying binary from $SRC_BIN to artifacts/${{ matrix.platform_name }}/"
          cp -r "$SRC_BIN" "artifacts/${{ matrix.platform_name }}/"
          
          # For macOS app bundles, also copy the binary from within the bundle
          if [[ "${{ matrix.platform_name }}" == "macos" && -d "$SRC_BIN" && "$SRC_BIN" == *".app" ]]; then
            BUNDLE_BINARY="$SRC_BIN/Contents/MacOS/${{ matrix.executable_name }}"
            if [ -f "$BUNDLE_BINARY" ]; then
              echo "Copying macOS bundle binary from $BUNDLE_BINARY"
              cp "$BUNDLE_BINARY" "artifacts/${{ matrix.platform_name }}/${{ matrix.executable_name }}"
            fi
          fi
        else
          echo "Error: Binary not found at $SRC_BIN"
          echo "Directory contents of $(dirname "$SRC_BIN"):"
          ls -la "$(dirname "$SRC_BIN")" || true
          exit 1
        fi
        
        # Copy release info if it exists
        if [ -f "$SRC_DIR/release_info.json" ]; then
          echo "Copying release_info.json"
          cp "$SRC_DIR/release_info.json" "artifacts/${{ matrix.platform_name }}/"
        else
          echo "No release_info.json found, continuing..."
        fi
        
        echo "Artifacts copied successfully"
        echo "Artifacts directory contents:"
        ls -la "artifacts/${{ matrix.platform_name }}/"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/${{ matrix.platform_name }}/
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release
        
        # Copy executables
        if [ -f "hvym-windows/hvym.exe" ]; then
          cp hvym-windows/hvym.exe release/hvym-windows.exe
        fi
        
        # macOS arm64 and amd64
        if [ -f "hvym-macos-arm64/hvym" ]; then 
          cp hvym-macos-arm64/hvym release/hvym-macos-arm64
        fi
        if [ -f "hvym-macos-amd64/hvym" ]; then
          cp hvym-macos-amd64/hvym release/hvym-macos-amd64
        fi
        
        # Linux binary - handle both possible locations
        if [ -f "hvym-linux/hvym" ]; then
          cp hvym-linux/hvym release/hvym-linux
        elif [ -f "hvym/dist/linux/hvym" ]; then
          mkdir -p release/hvym-linux-dir
          cp hvym/dist/linux/hvym release/hvym-linux-dir/hvym
          mv release/hvym-linux-dir/hvym release/hvym-linux
          rmdir release/hvym-linux-dir
        fi
        
        # Set executable permissions for Unix binaries
        [ -f "release/hvym-linux" ] && chmod +x release/hvym-linux
        [ -f "release/hvym-macos-arm64" ] && chmod +x release/hvym-macos-arm64
        [ -f "release/hvym-macos-amd64" ] && chmod +x release/hvym-macos-amd64
        
        # Create platform-specific archives
        cd release
        
        # Windows zip
        zip -r hvym-windows.zip hvym-windows.exe
        
        # macOS tar.gz (arm64 and amd64 if present)
        if [ -f hvym-macos-arm64 ]; then tar -czf hvym-macos-arm64.tar.gz hvym-macos-arm64; fi
        if [ -f hvym-macos-amd64 ]; then tar -czf hvym-macos-amd64.tar.gz hvym-macos-amd64; fi
        
        # Linux tar.gz - only create if the file exists
        if [ -f "hvym-linux" ]; then
          tar -czf hvym-linux.tar.gz hvym-linux
        else
          echo "Warning: Linux binary not found, skipping Linux archive creation"
        fi
        
        # Combined archive - only include existing files
        ARGS=()
        [ -f "hvym-windows.exe" ] && ARGS+=(hvym-windows.exe)
        [ -f "hvym-linux" ] && ARGS+=(hvym-linux)
        [ -f "hvym-macos-arm64" ] && ARGS+=(hvym-macos-arm64)
        [ -f "hvym-macos-amd64" ] && ARGS+=(hvym-macos-amd64)
        
        if [ ${#ARGS[@]} -gt 0 ]; then
          tar -czf hvym-all-platforms.tar.gz "${ARGS[@]}"
        else
          echo "Warning: No binary files found for combined archive"
        fi
        
        ls -la
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          # HeavyMeta CLI ${{ github.ref_name }}
          
          ## Downloads
          
          ### Platform-Specific Downloads
          - **Windows**: [hvym-windows.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-windows.zip)
          - **macOS (Apple Silicon)**: [hvym-macos-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-macos-arm64.tar.gz)
          - **macOS (Intel amd64)**: [hvym-macos-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-macos-amd64.tar.gz)
          - **Linux**: [hvym-linux.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-linux.tar.gz)
          
          ### All Platforms
          - **Combined**: [hvym-all-platforms.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-all-platforms.tar.gz)
          
          ## Installation
          
          ### Windows
          1. Download `hvym-windows.zip`
          2. Extract the archive
          3. Run `hvym-windows.exe` from command prompt
          
          ### macOS (Apple Silicon)
          1. Download `hvym-macos-arm64.tar.gz`
          2. Extract: `tar -xzf hvym-macos-arm64.tar.gz`
          3. Run: `./hvym-macos-arm64`

          ### macOS (Intel amd64)
          1. Download `hvym-macos-amd64.tar.gz`
          2. Extract: `tar -xzf hvym-macos-amd64.tar.gz`
          3. Run: `./hvym-macos-amd64`
          
          ### Linux
          1. Download `hvym-linux.tar.gz`
          2. Extract: `tar -xzf hvym-linux.tar.gz`
          3. Run: `./hvym-linux`
          
          ## Build Information
          
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: ${{ github.sha }}
          - **Python Version**: 3.11
        draft: false
        prerelease: false
        files: |
          release/hvym-windows.zip
          release/hvym-macos-arm64.tar.gz
          release/hvym-macos-amd64.tar.gz
          release/hvym-linux.tar.gz
          release/hvym-all-platforms.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 