name: Build Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v0.00, v0.01, v0.02)

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest, macos-latest, macos-13, ubuntu-22.04]
        include:
          - platform: windows-latest
            platform_name: windows
            artifact_name: hvym-windows
            executable_name: hvym.exe
            python_version: '3.11'
          - platform: macos-latest
            platform_name: macos
            artifact_name: hvym-macos-arm64
            executable_name: hvym
            python_version: '3.10'
          - platform: macos-13
            platform_name: macos
            artifact_name: hvym-macos-amd64
            executable_name: hvym
            python_version: '3.11'
          - platform: ubuntu-22.04
            platform_name: linux
            artifact_name: hvym-linux
            executable_name: hvym
            python_version: '3.11'

    runs-on: ${{ matrix.platform }}
    env:
      # Enable extra PyInstaller logging during CI builds
      HVYM_PYI_LOG_DEBUG: '1'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}
        check-latest: true
        
    - name: Check Python environment
      run: |
        echo "Python version: $(python --version)"
        echo "Python location: $(which python)"
        echo "Pip location: $(which pip)"
        echo "Python path: $PYTHONPATH"
        echo "Current working directory: $(pwd)"
        echo "[hvym-ci] sys.path (top 10):"
        python -c "import sys; print(sys.path[:10])"
        
    - name: Build Linux executable in Docker
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        
        # Create output directories
        mkdir -p hvym/dist/linux/
        
        # Build the Docker image
        echo "Building Docker image..."
        docker build -t hvym-builder -f Dockerfile.linux-build .
        
        # Create a temporary build script to avoid quoting issues
        cat > /tmp/build_script.sh << 'EOL'
        #!/bin/bash
        set -e
        
        echo "Starting build inside container..."
        cd /app
        
        # Set up environment
        export PYTHONPATH=/app
        
        # Debug: Show current directory structure
        echo "Current directory structure:"
        ls -la /app
        
        # Create output directory if it doesn't exist
        mkdir -p /app/hvym/dist/linux
        
        # Run the build
        echo "Running build command..."
        python build_cross_platform.py --platform linux
        
        # Debug: Show build output
        echo "Build output directories:"
        echo "Checking /hvym/dist/linux/..."
        ls -la /hvym/dist/linux/ 2>/dev/null || echo "/hvym/dist/linux/ not found"
        echo "\nChecking /app/hvym/dist/linux/..."
        ls -la /app/hvym/dist/linux/ 2>/dev/null || echo "/app/hvym/dist/linux/ not found"
        echo "\nChecking /app/dist/linux/..."
        ls -la /app/dist/linux/ 2>/dev/null || echo "/app/dist/linux/ not found"
        
        # Check for the binary in multiple possible locations
        BINARY_PATH="/hvym/dist/linux/hvym"
        if [ ! -f "$BINARY_PATH" ]; then
            BINARY_PATH="/app/hvym/dist/linux/hvym"
            if [ ! -f "$BINARY_PATH" ]; then
                BINARY_PATH="/app/dist/linux/hvym"
            fi
        fi
        
        # Verify the binary was created
        if [ -f "$BINARY_PATH" ]; then
            echo "Build successful! Binary found at $BINARY_PATH"
            chmod +x "$BINARY_PATH"
            
            # Show binary information
            echo "Binary information:"
            file "$BINARY_PATH"
            ldd "$BINARY_PATH" || true
            
            # Copy to a temporary location that will be accessible outside the container
            mkdir -p /tmp/output
            cp "$BINARY_PATH" /tmp/output/hvym-linux
            chmod +x /tmp/output/hvym-linux
            
            # Also copy to /app/hvym/dist/linux for verification
            mkdir -p /app/hvym/dist/linux
            cp "$BINARY_PATH" /app/hvym/dist/linux/hvym
            chmod +x /app/hvym/dist/linux/hvym
            exit 0
        else
            echo "Error: Build failed - binary not found!"
            echo "Searched in:"
            echo "  /hvym/dist/linux/hvym"
            echo "  /app/hvym/dist/linux/hvym"
            echo "  /app/dist/linux/hvym"
            echo "Current directory: $(pwd)"
            echo "Directory contents (top level):"
            ls -la /
            echo "\nSearching for binary in / :"
            find / -name "hvym" -type f 2>/dev/null || true
            exit 1
        fi
        EOL
        
        # Make the script executable
        chmod +x /tmp/build_script.sh
        
        # Run the build inside the container with proper volume mounts
        echo "Running build inside container..."
        docker run --rm \
          -v "$(pwd):/app" \
          -v "/tmp/build_script.sh:/tmp/build_script.sh" \
          -w /app \
          --entrypoint /bin/bash \
          hvym-builder \
          /tmp/build_script.sh
          
        # After build, check if the binary exists in the expected location
        if [ -f "/tmp/hvym-linux" ]; then
            echo "Found binary at /tmp/hvym-linux"
            mkdir -p hvym/dist/linux/
            mv /tmp/hvym-linux hvym/dist/linux/hvym
            chmod +x hvym/dist/linux/hvym
            echo "Binary moved to hvym/dist/linux/hvym"
        fi
        
        # Verify the binary was created in the expected location
        if [ -f "hvym/dist/linux/hvym" ]; then
            echo "Binary successfully built:"
            ls -lh hvym/dist/linux/hvym
            
            # Verify the binary is executable
            if [ -x "hvym/dist/linux/hvym" ]; then
                echo "Binary is executable"
                exit 0
            else
                echo "Error: Binary is not executable:"
                ls -la hvym/dist/linux/
                exit 1
            fi
        else
            echo "Error: Failed to find built binary in hvym/dist/linux/"
            echo "Current working directory: $(pwd)"
            echo "Directory contents:"
            find . -type f -name "hvym" -o -name "*.so" || true
            exit 1
        fi
        
    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        # Install Xcode Command Line Tools if not already installed
        xcode-select --install || true
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Installing build requirements..."
        pip install -r build_requirements.txt
        echo "Build requirements installation completed"
        echo "pip freeze (top 120):" && pip freeze | sed -n '1,120p'

    - name: Verify PyInstaller installation
      run: |
        python -c "import PyInstaller; print('PyInstaller version:', PyInstaller.__version__)"
        which pyinstaller || echo "PyInstaller not in PATH"
        pyinstaller --version
        
    - name: Test build script
      run: |
        python build_cross_platform.py --info
        
    - name: Build executable
      run: |
        echo "Platform matrix: ${{ toJson(matrix) }}"
        python build_cross_platform.py --platform ${{ matrix.platform_name }}
        echo "Build script completed with exit code: $?"
        
    - name: Debug build output
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing current directory:"
        ls
        echo "Listing parent directory:"
        ls ..
      shell: bash
        
    - name: Verify executable
      run: |
        echo "Verifying executable for platform: ${{ matrix.platform_name }}"
        if [[ "${{ matrix.platform_name }}" == "linux" ]]; then
          # Linux binary is in the current directory structure
          echo "Linux binary location:"
          ls -l hvym/dist/linux/${{ matrix.executable_name }}
          if [ ! -f "hvym/dist/linux/${{ matrix.executable_name }}" ]; then
            echo "Error: Linux binary not found at expected location"
            exit 1
          fi
        else
          # Original behavior for other platforms
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            dir ../hvym/dist/${{ matrix.platform_name }}/
          else
            ls -l ../hvym/dist/${{ matrix.platform_name }}/${{ matrix.executable_name }}
          fi
        fi
      shell: bash
        
    - name: Copy build artifacts to workspace
      if: matrix.platform_name != 'windows'
      run: |
        echo "Copying artifacts for platform: ${{ matrix.platform_name }}"
        mkdir -p artifacts/${{ matrix.platform_name }}
        
        if [[ "${{ matrix.platform_name }}" == "linux" ]]; then
          # Linux-specific handling
          echo "Linux build detected"
          cp hvym/dist/linux/${{ matrix.executable_name }} artifacts/${{ matrix.platform_name }}/
          if [ -f "hvym/dist/linux/release_info.json" ]; then
            cp hvym/dist/linux/release_info.json artifacts/${{ matrix.platform_name }}/
          else
            echo "Warning: release_info.json not found for Linux build"
          fi
        else
          # macOS handling
          echo "macOS build detected"
          cp "../hvym/dist/${{ matrix.platform_name }}/${{ matrix.executable_name }}" "artifacts/${{ matrix.platform_name }}/"
          if [ -f "../hvym/dist/${{ matrix.platform_name }}/release_info.json" ]; then
            cp "../hvym/dist/${{ matrix.platform_name }}/release_info.json" "artifacts/${{ matrix.platform_name }}/"
          else
            echo "Warning: release_info.json not found for ${{ matrix.platform_name }}"
          fi
        fi
        
        echo "Artifacts copied to artifacts/${{ matrix.platform_name }}:"
        ls -la "artifacts/${{ matrix.platform_name }}/"
      shell: bash
      
    - name: Copy build artifacts to workspace (Windows)
      if: matrix.platform_name == 'windows'
      run: |
        Write-Host "Copying artifacts for Windows build"
        $artifactDir = "artifacts/windows"
        $sourceDir = "..\hvym\dist\windows"
        $executable = "${{ matrix.executable_name }}"
        
        # Create artifacts directory if it doesn't exist
        if (-not (Test-Path -Path $artifactDir)) {
            New-Item -ItemType Directory -Path $artifactDir | Out-Null
        }
        
        # Copy executable
        $sourceFile = Join-Path $sourceDir $executable
        if (Test-Path -Path $sourceFile) {
            Copy-Item -Path $sourceFile -Destination $artifactDir
            Write-Host "Copied $executable to $artifactDir"
        } else {
            Write-Error "Error: Windows executable not found at $sourceFile"
            exit 1
        }
        
        # Copy release_info.json if it exists
        $releaseInfo = Join-Path $sourceDir "release_info.json"
        if (Test-Path -Path $releaseInfo) {
            Copy-Item -Path $releaseInfo -Destination $artifactDir
            Write-Host "Copied release_info.json to $artifactDir"
        } else {
            Write-Warning "release_info.json not found for Windows build"
        }
        
        # List copied artifacts
        Write-Host "Artifacts in $artifactDir:"
        Get-ChildItem -Path $artifactDir

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/${{ matrix.platform_name }}/
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release
        
        # Copy executables
        cp hvym-windows/hvym.exe release/hvym-windows.exe
        # macOS arm64 and amd64
        if [ -d hvym-macos-arm64 ]; then cp hvym-macos-arm64/hvym release/hvym-macos-arm64; fi
        if [ -d hvym-macos-amd64 ]; then cp hvym-macos-amd64/hvym release/hvym-macos-amd64; fi
        cp hvym-linux/hvym release/hvym-linux
        
        # Set executable permissions for Unix binaries
        chmod +x release/hvym-linux || true
        chmod +x release/hvym-macos-arm64 || true
        chmod +x release/hvym-macos-amd64 || true
        
        # Create platform-specific archives
        cd release
        
        # Windows zip
        zip -r hvym-windows.zip hvym-windows.exe
        
        # macOS tar.gz (arm64 and amd64 if present)
        if [ -f hvym-macos-arm64 ]; then tar -czf hvym-macos-arm64.tar.gz hvym-macos-arm64; fi
        if [ -f hvym-macos-amd64 ]; then tar -czf hvym-macos-amd64.tar.gz hvym-macos-amd64; fi
        
        # Linux tar.gz
        tar -czf hvym-linux.tar.gz hvym-linux
        
        # Combined archive
        ARGS=(hvym-windows.exe hvym-linux)
        if [ -f hvym-macos-arm64 ]; then ARGS+=(hvym-macos-arm64); fi
        if [ -f hvym-macos-amd64 ]; then ARGS+=(hvym-macos-amd64); fi
        tar -czf hvym-all-platforms.tar.gz "${ARGS[@]}"
        
        ls -la
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          # HeavyMeta CLI ${{ github.ref_name }}
          
          ## Downloads
          
          ### Platform-Specific Downloads
          - **Windows**: [hvym-windows.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-windows.zip)
          - **macOS (Apple Silicon)**: [hvym-macos-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-macos-arm64.tar.gz)
          - **macOS (Intel amd64)**: [hvym-macos-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-macos-amd64.tar.gz)
          - **Linux**: [hvym-linux.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-linux.tar.gz)
          
          ### All Platforms
          - **Combined**: [hvym-all-platforms.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hvym-all-platforms.tar.gz)
          
          ## Installation
          
          ### Windows
          1. Download `hvym-windows.zip`
          2. Extract the archive
          3. Run `hvym-windows.exe` from command prompt
          
          ### macOS (Apple Silicon)
          1. Download `hvym-macos-arm64.tar.gz`
          2. Extract: `tar -xzf hvym-macos-arm64.tar.gz`
          3. Run: `./hvym-macos-arm64`

          ### macOS (Intel amd64)
          1. Download `hvym-macos-amd64.tar.gz`
          2. Extract: `tar -xzf hvym-macos-amd64.tar.gz`
          3. Run: `./hvym-macos-amd64`
          
          ### Linux
          1. Download `hvym-linux.tar.gz`
          2. Extract: `tar -xzf hvym-linux.tar.gz`
          3. Run: `./hvym-linux`
          
          ## Build Information
          
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: ${{ github.sha }}
          - **Python Version**: 3.11
        draft: false
        prerelease: false
        files: |
          release/hvym-windows.zip
          release/hvym-macos-arm64.tar.gz
          release/hvym-macos-amd64.tar.gz
          release/hvym-linux.tar.gz
          release/hvym-all-platforms.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 